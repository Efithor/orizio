<!-- views/orizioFront -->
<!doctype html>
<html>
  <head>
    <head>
      <title>Oriz.io</title>
      <style>
        * { margin: 0; padding: 0; box-sizing: border-box;}
        body { font: 13px Helvetica, Arial;}
        #SubmissionBoxes {position:absolute; bottom: 0; border-style:solid; width:640px;}
        form { background: #000; padding: 3 px; position: relative; bottom: 0;}
        form input { border: 0; padding 10px; width: 90%; margin-right: .5%; }
        form button { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }
        #messages { list-style-type: none; margin: 0; padding: 0; border-style:solid;
          width:535px;overflow-y:scroll; position:absolute; top:490px; bottom:50px;
          left: 105px;}
        #messages li { padding: 5px 10px; }
        #messages li:nth-child(odd) { background: #eee; }
        #map {}
        #orizioWrapper{width:640px; margin:auto; position: relative; height: 100vh;}
        #userList{list-style-type: none; margin: 0; padding: 0; border-style:solid;
          width:100px;overflow-y:scroll; position:absolute; top:490px; bottom:50px;}
      </style>
    </head>
    <body>
      <div id="orizioWrapper">
      <div id="map">
        <canvas id="mapCanvas" width="640" height="490">
      </div>
      <ul id="messages"></ul>
      <ul id="userList"></ul>
      <div id="SubmissionBoxes">
        <form id="Chatter" action="">
          <input id="c" autocomplete="off" /><button>Send</button>
        </form>
      </div>
    </div>
      <script src="http://localhost:3000/socket.io/socket.io.js"></script>
      <script src="https://code.jquery.com/jquery-1.11.1.js"></script>
      <script type="text/javascript" src="http://localhost:8080/paper/paper-full.js"></script>
      <script>
        //Clientside data
        var validExits = []; //Array of valid exits - prevent the user from clicking exits that don't work.
        var playerTokenPos;
        var inventoryArray = [];
        var invSquares = []; //Array of inventory squares. Inventory raster objects are stored at invSquares[i].containedItem
        //Setup some variables:
        var mapPaneIsOpen = true;
        var invPaneIsOpen = false;
        var itemStatBox;
        var itemStatBoxOpen = false;
        var skillPaneIsOpen = false;
        var objectBeingGrabbed = null;
        //Load the graphics
        var c = document.getElementById("mapCanvas");
        paper.setup(c);

        //Load in paper tools
        var paperTool = new paper.Tool();

        //Load images
        var map = new paper.Raster("http://localhost:8080/mapA.png");
        map.position = new paper.Point(320,200);
        map.scale(2);

        //Map Icons
        var adacrossIcon = new paper.Raster("http://localhost:8080/adacross1.png");
        adacrossIcon.scale(2);
        adacrossIcon.position = new paper.Point(296,230);
        var trainingGroundIcon = new paper.Raster("http://localhost:8080/Training1.png");
        trainingGroundIcon.scale(2);
        trainingGroundIcon.position = new paper.Point(140,230);
        var graniteSpireIcon = new paper.Raster("http://localhost:8080/GSpire1.png");
        graniteSpireIcon.scale(2);
        graniteSpireIcon.position = new paper.Point(530,70);
        //Player Pawn
        var playerPawn = new paper.Path.RegularPolygon(new paper.Point(-5000, -5000), 3, 25);
        playerPawn.fillColor = 'blue';
        var mapGroup = new paper.Group([map,adacrossIcon,trainingGroundIcon,graniteSpireIcon,playerPawn]);

        //Room Selector
        var roomSelectorIcon = document.createElement("IMG");
        roomSelectorIcon.setAttribute("src", "http://localhost:8080/roomSelector.png");
        var roomSelector = new paper.Raster(roomSelectorIcon, new paper.Point(-5000,-5000));
        roomSelector.scale(1.7);

        //Load Menu Panes
        //Inv Pane
        var inventoryPane = new paper.Path.Rectangle(new paper.Point(0,0), new paper.Point(640,500));
        inventoryPane.fillColor = "brown";
        var weaponSquare = new paper.Path.Rectangle(new paper.Point(50,100),100);
        weaponSquare.strokeColor = "black";
        var weaponText = new paper.PointText();
        weaponText.position = new paper.Point(80,100);
        weaponText.content = "WEAPON";
        weaponText.fillColor = "black";
        weaponSquare.equippedItem = null; //Set the weapon square's equippedItem to null
        var armorSquare = new paper.Path.Rectangle(new paper.Point(50,300),100);
        armorSquare.strokeColor = "black";
        var armorText = new paper.PointText(new paper.Point(80,280));
        armorText.content = "ARMOR";
        armorText.fillColor = "black";
        armorSquare.equippedItem = null; //Set the armor square's equippedItem to null
        var inventoryPaneGroup = new paper.Group([inventoryPane,weaponSquare,armorSquare,weaponText,armorText]);
        //Generate Empty Inv Squares
        var invSquareCount = 0;
        for(var i=0;i<3;i++){
          for(var q=0;q<4;q++){
            invSquares[invSquareCount] = new paper.Path.Rectangle(new paper.Point(200 + q*105,150 + i*105),100);
            invSquares[invSquareCount].strokeColor = "black";
            invSquares[invSquareCount].item = null;
            inventoryPaneGroup.addChild(invSquares[invSquareCount]);
            invSquareCount++;
          }
        }
        inventoryPaneGroup.position = new paper.Point(-5000,-5000);

        //Load Buttons
        var mapButton = new paper.Raster("http://localhost:8080/mapButton.png");
        mapButton.scale(1.5);
        mapButton.position = new paper.Point(50,470);
        var skillButton = new paper.Raster("http://localhost:8080/SkillButton.png");
        skillButton.scale(1.5);
        skillButton.position = new paper.Point(135,470);
        var invButton = new paper.Raster("http://localhost:8080/INVButton.png");
        invButton.scale(1.5);
        invButton.position = new paper.Point(220,470);


        //ONLOAD
        window.onload = function(){

          //Handle canvas clicks.
          paperTool.onMouseDown = function(event){
            //Object Click and Drag
            if(objectBeingGrabbed!=null){
              //Inv Cases
              //EQUIP
              //If the held object is a weapon, isn't the weapon currently equipped, and is being held over the weapon slot, have it slot in and send an equip to the server.
              //Should also unequip whatever is currently equipped.
              if(objectBeingGrabbed != weaponSquare.equippedItem && arrayContains(objectBeingGrabbed.data.types,"weapon") && weaponSquare.contains(event.point)){
                weaponSquare.equippedItem = objectBeingGrabbed; //Add object being grabbed to the weapon square's EI catagory.
                //Remove the objectBeingGrabbed from inventory objects
                for(var i=0;i<invSquares.length;i++){
                  if(invSquares[i].containedItem != null && invSquares[i].containedItem === objectBeingGrabbed){
                    invSquares[i].containedItem = null;
                    break;
                  }
                }
                mouseRelease(objectBeingGrabbed,weaponSquare.position);
                console.log("Tell the server to Equip the thing!"); //If there's already an item there, the server will move that item to the first available inventory space.
                return;
              }
              //As above, but for armor.
              if(objectBeingGrabbed != armorSquare.equippedItem && arrayContains(objectBeingGrabbed.data.types,"armor") && armorSquare.contains(event.point)){
                armorSquare.equippedItem = objectBeingGrabbed; //Add object being grabbed to the weapon square's EI catagory.
                //Remove the objectBeingGrabbed from inventory objects
                for(var i=0;i<invSquares.length;i++){
                  if(invSquares[i].containedItem != null && invSquares[i].containedItem === objectBeingGrabbed){
                    invSquares[i].containedItem = null;
                    break;
                  }
                }
                mouseRelease(objectBeingGrabbed,armorSquare.position);
                console.log("Tell the server to Equip the thing!"); //If there's already an item there, the server will move that item to the first available inventory space.
                return;
              }

              //MOVE ITEM/UNEQUIP ITEM
              //If the grabbed item isn't equipped, drop it in and update the server.
                for(var i=0;i<invSquares.length;i++){
                if(invSquares[i].contains(event.point)){
                  //If the square is empty, just drop it in. Otherwise, exchange the two items. Don't update the server until the other one has been dropped.
                  var squareToMoveFrom = findItemSquare(objectBeingGrabbed); //See what square we're taking this from. May not exist in some cases.
                  if(squareToMoveFrom != false){
                    squareToMoveFrom.containedItem = null;
                  }
                  //If there's an object already in the space, put that object into a buffer real quick.
                  var objectExchangeBuffer = null;
                  if(invSquares[i].containedItem != null){
                    objectExchangeBuffer = invSquares[i].containedItem;
                  }
                  invSquares[i].containedItem = objectBeingGrabbed;
                  //If the item is equipped, unequip it.
                  if(isEquipped(objectBeingGrabbed)){
                    unequipItem(objectBeingGrabbed);
                  }
                  mouseRelease(objectBeingGrabbed,invSquares[i].position);
                  //If the exchange buffer has an item in it, grab it.
                  if(objectExchangeBuffer != null){
                    mouseGrab(objectExchangeBuffer);
                  }
                  return;
                }
              }


              //DROP AND RETURN
              //Otherwise, just drop it. The inventory item should return to its previous spot.
              //Find where the object is in the invSquares array.
              //Once found, release it to that position.
              for(var i=0;i<invSquares.length;i++){
                if(invSquares[i] != null && invSquares[i].containedItem === objectBeingGrabbed){
                  mouseRelease(objectBeingGrabbed,invSquares[i].position);
                  return;
                }
              }
              //Do the same for equipped items.
              if(weaponSquare != null && weaponSquare.equippedItem === objectBeingGrabbed){
                mouseRelease(objectBeingGrabbed,weaponSquare.position);
                return;
              }
              if(armorSquare != null && armorSquare.equippedItem === objectBeingGrabbed){
                mouseRelease(objectBeingGrabbed,armorSquare.position);
                return;
              }

              return;
            }

            //Map Icons
            if(adacrossIcon.contains(event.point) && validExits.findIndex(function isExit(exit){return exit==='adacross';})!=-1){
              moveCharacter('adacross');
            }
            if(trainingGroundIcon.contains(event.point) && validExits.findIndex(function isExit(exit){return exit==='trainingField';})!=-1){
              moveCharacter('trainingField');
            }
            if(graniteSpireIcon.contains(event.point) && validExits.findIndex(function isExit(exit){return exit==='graniteSpire';})!=-1){
              moveCharacter('graniteSpire');
            }

            //Menu Buttons
            //Inventory
            if(invButton.contains(event.point)){
              if(!invPaneIsOpen){
                invPaneIsOpen = true;
                getInventoryFromServer(); //Request Inventory from server
                //Move current pane out of the way.
                if(mapPaneIsOpen){
                  mapPaneIsOpen = false;
                  //mapGroup.position = new paper.Point(0,0);
                  mapGroup.position = new paper.Point(-5000,-5000);
                }
                if(skillPaneIsOpen){
                  //Move skill pane.
                }
                inventoryPaneGroup.position = new paper.Point(320,200); //Move inventory into position.
              }else{
                invPaneIsOpen = false;
                inventoryPaneGroup.position = new paper.Point(-5000,-5000); //Move inventory off screen.
                depopulateInventory();
                //mapGroup.position = paper.view.center; //Move the map pane into position.
                mapGroup.position = new paper.Point(320,200);
                mapPaneIsOpen = true;
              }
            }
            //Inventory items
            if(invPaneIsOpen){
              //If inventory object is grabbed, grab it.
              for(var i=0;i<invSquares.length;i++){
                if(invSquares[i].containedItem != null && invSquares[i].containedItem.contains(event.point)){
                  deleteItemStatBox();
                  mouseGrab(invSquares[i].containedItem);
                  break;
                }
              }
              //If equipped weapon is clicked, grab it.
              if(weaponSquare.equippedItem != null && weaponSquare.equippedItem.contains(event.point)){
                deleteItemStatBox();
                mouseGrab(weaponSquare.equippedItem);
                return;
              }
              //If equipped armor is clicked, grab it.
              if(armorSquare.equippedItem != null && armorSquare.equippedItem.contains(event.point)){
                deleteItemStatBox();
                mouseGrab(armorSquare.equippedItem);
                return;
              }
            }
          }

          //Handle mouse hovers
          var mousePos;
          //If the mouse moves, record the movement.
          paperTool.onMouseMove = function(event){
            mousePos = event.point;
          }
          paper.view.onFrame = function(event){
            //Move the room selector
            var roomSelected = false;
            if(adacrossIcon.contains(mousePos) && validExits.findIndex(function isExit(exit){return exit==='adacross';})!=-1){
              roomSelector.position = new paper.Point(296,230);
              roomSelected = true;
            }
            if(trainingGroundIcon.contains(mousePos) && validExits.findIndex(function isExit(exit){return exit==='trainingField';})!=-1){
              roomSelector.position = new paper.Point(140,230);
              roomSelected = true;
            }
            if(graniteSpireIcon.contains(mousePos) && validExits.findIndex(function isExit(exit){return exit==='graniteSpire';})!=-1){
              roomSelector.position = new paper.Point(530,70);
              roomSelected = true;
            }
            if(!roomSelected){
              roomSelector.position = new paper.Point(-5000, -5000);
            }

            //If no item is being actively grabbed and the player is hovering over an item raster, draw a stat box for it.
            if(objectBeingGrabbed === null && !itemStatBoxOpen){
              if(weaponSquare.equippedItem != null && weaponSquare.contains(mousePos)){
                drawItemStatBox(weaponSquare.equippedItem);
              }
              if(armorSquare.equippedItem != null && armorSquare.contains(mousePos)){
                drawItemStatBox(armorSquare.equippedItem);
              }
              for(var i=0;i<invSquares.length;i++){
                if(invSquares[i].containedItem != null && invSquares[i].contains(mousePos)){
                  drawItemStatBox(invSquares[i].containedItem);
                  break;
                }
              }
            }
            //If a stat box is open but the player has moved off that point, erase the box.
            if(itemStatBoxOpen && !itemStatBox.currInfo.contains(mousePos)){
              deleteItemStatBox();
            }
            //If a statbox is open, have it move the mouse.
            if(itemStatBoxOpen){
              itemStatBox.position = new paper.Point(mousePos.x-75,mousePos.y+60);
            }
            //If the mouse has grabbed something, ensure it moves along with the mouse.
            if(objectBeingGrabbed != null){
              objectBeingGrabbed.position = mousePos;
            }

            paper.view.update();
          }

          //Socket Related stuff
          //Handle socket related stuff
          var socToken = '<%= socToken %>';
          //Talk to passport and figure out who I am.
          //Have socket ask for a token.
          var socket = io.connect('http://localhost:3000', {
            query: {token : socToken}
          });
          //Send Chat message
          $('#Chatter').submit(function(){
            socket.emit('chat message', $('#c').val());
            $('#c').val('');
            return false;
          });
          //Move character function
          function moveCharacter(dest){
            socket.emit('char move', dest);
          };
          //Get Inventory function
          function getInventoryFromServer(){
            socket.emit('getInventory');
          };
          //Receive Chat
          socket.on('chat message', function(msg){
            $('#messages').append($('<li>').text(msg));
            updateScrollbar();
          });
          //Receive Data
          socket.on('data: validExits', function(data){
            validExits = [];
            validExits = data;
          });
          socket.on('data: currRoom', function(data){
            playerTokenPos = data;
            updatePlayerToken();
          });
          socket.on('data: playerList', function(data){
            updatePlayerList(data);
          });
          //Inventory data for the purposes of displaying inv.
          socket.on('data: inventory', function(data){
            inventoryArray = data;
            //If the inventory pane is active, populate inv.
            populateInventory();
          });
        }
        //Function to handle the scrollbar
        function updateScrollbar(){
            var element = document.getElementById('messages');
            element.scrollTop = element.scrollHeight;
        }
        function updatePlayerToken(){
          if(playerTokenPos==='adacross'){
            playerPawn.position = new paper.Point(296,230);
          }
          if(playerTokenPos==='graniteSpire'){
            playerPawn.position = new paper.Point(140,230);
          }
          if(playerTokenPos==='trainingField'){
            playerPawn.position = new paper.Point(530,70);
          }
        }
        function updatePlayerList(_playerList){
          var playerList = _playerList;
          $('#userList').empty();
          for(var i=0;i<playerList.length;i++){
            $('#userList').append($('<li>').text(playerList[i]));
          }
        }

        //If the inv pane is open, populate it. Must only be called after getting data.
        function populateInventory(){
          for(var i=0;i<inventoryArray.length;i++){
            invSquares[i].containedItem = new paper.Raster(getItemIcon(inventoryArray[i].id));
            invSquares[i].containedItem.scale(2);
            //Pass item info to the raster.
            invSquares[i].containedItem.data = inventoryArray[i];
            //Put the item into an appropriate slot.
            invSquares[i].containedItem.position = invSquares[i].position;
          }
        }
        //Clear the invSquare's containedItem Array and remove the rasters.
        function depopulateInventory(){
          for(var i=0;i<invSquares.length;i++){
            if(invSquares[i].containedItem != null){
              invSquares[i].containedItem.remove();
            }
          }
        }

        //If there is a cleaner way to do this, do let me know.
        function getItemIcon(itemID){
          switch(itemID) {
            case "bronzeSword":
              return "http://localhost:8080/BronzeSword.png";
              break;
            case "ironSword":
              return "http://localhost:8080/IronSword.png";
              break;
            case "steelSword":
              return "http://localhost:8080/SteelSword.png";
              break;
            case "wrathiteSword":
              return "http://localhost:8080/WrathiteSword.png";
              break;
            case "bronzeSpear":
              return "http://localhost:8080/BronzeSpear.png";
              break;
            case "ironSpear":
              return "http://localhost:8080/IronSpear.png";
              break;
            case "steelSpear":
              return "http://localhost:8080/SteelSpear.png";
              break;
            case "wrathiteSpear":
              return "http://localhost:8080/WrathiteSpear.png";
              break;
            case "bronzeHammer":
              return "http://localhost:8080/maceBronze.png";
              break;
            case "ironHammer":
              return "http://localhost:8080/maceIron.png";
              break;
            case "steelHammer":
              return "http://localhost:8080/maceSteel.png";
              break;
            case "wrathiteHammer":
              return "http://localhost:8080/maceWrathite.png";
              break;
            case "bronzeChainArmor":
              return "http://localhost:8080/chainmailBronze.png";
              break;
            case "ironChainArmor":
              return "http://localhost:8080/chainmailIron.png";
              break;
            case "steelChainArmor":
              return "http://localhost:8080/chainmailSteel.png";
              break;
            case "wrathiteChainArmor":
              return "http://localhost:8080/chainmailWrathite.png";
              break;
            default:
              return "http://localhost:8080/unknownItem.png";
          }
        }

        //If called, grab an object.
        function mouseGrab(object){
          objectBeingGrabbed = object;
          objectBeingGrabbed.bringToFront();
        }

        //If called, release the grabbed object, if any.
        function mouseRelease(object,positionToReleaseTo){
          if(typeof positionToReleaseTo != "undefined"){
            objectBeingGrabbed.position = positionToReleaseTo;
          }
          objectBeingGrabbed = null;
        }

        //Does the array (arg1) contain the element arg2?
        function arrayContains(array,element){
          for(var i=0;i<array.length;i++){
            if(array[i]===element){
              return true;
            }
          }
          return false;
        }

        //Check if an item raster is in any of the equipped slots.
        function isEquipped(raster){
          if(weaponSquare.equippedItem === raster || armorSquare.equippedItem === raster){
            return true;
          }
          return false;
        }

        //Given an item, return what square it's in.
        function findItemSquare(raster){
          for(var i=0;i<invSquares.length;i++){
            if(invSquares[i].containedItem===raster){
              return invSquares[i];
            }
          }
          return false;
        }

        //Given an item, unequip it.
        function unequipItem(raster){
          //Check if it's equipped.
          if(!isEquipped(raster)){
            console.log("Error: " + raster + " is not equipped.");
            return;
          }
          //Search each slot for the raster.
          if(weaponSquare.equippedItem === raster){
            //Clear the weapon slot.
            weaponSquare.equippedItem = null;
            //Send a message to the server to unequip the weapon.
            console.log("Tell the server to unequip " + raster);
          }
          if(armorSquare.equippedItem === raster){
            //Clear the armor slot
            armorSquare.equippedItem = null;
            //Send a message to the server to unequip the armor.
            console.log("Tell the server to unequip " + raster);
          }
        }

        //Draw the itemStatBox
        function drawItemStatBox(raster){
          if(itemStatBoxOpen){
            console.log("Error: There is already an item stat box.");
            return;
          }
          if(raster===null){
            console.log("Error: Unable to draw statbox for null raster.");
            return;
          }
          //Draw a statbox.
          var itemStatBoxFrame = new paper.Path.Rectangle(new paper.Point(0,0),new paper.Point(150,100));
          itemStatBoxFrame.fillColor = "white";
          itemStatBoxFrame.strokeColor = "black";
          itemStatBox = new paper.Group(itemStatBoxFrame);
          var itemName = new paper.PointText(new paper.Point(25,25));
          itemName.fillColor = "black";
          itemName.content = raster.data.displayName;
          itemStatBox.addChild(itemName);
          var itemClass = new paper.PointText(new paper.Point(25,50));
          itemClass.fillColor = "black";
          itemClass.content = "Class: " + raster.data.class;
          itemStatBox.addChild(itemClass);
          var itemPower = new paper.PointText(new paper.Point(25,75));
          itemPower.fillColor = "black";
          itemPower.content = "Power: " + raster.data.power;
          itemStatBox.addChild(itemPower);

          itemStatBox.currInfo = raster;
          itemStatBoxOpen = true;
        }

        //Delete the itemStatBox.
        function deleteItemStatBox(){
          itemStatBox.remove();
          itemStatBox = null;
          itemStatBoxOpen = false;
        }
      </script>
    </body>
  </html>
